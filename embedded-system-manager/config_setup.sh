#!/bin/bash

#    Embedded System Manager
#    Copyright (C) 2025  Briar Merrett
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

CONFIG_FILE="$(dirname "$BASH_SOURCE")/config"

# Configuration setup.
configuration_setup() {
	
	# Save original directory to return to it later
	ORIGINAL_DIR="$(pwd)"

	SETUP_TITLE="Embedded System Manager Setup"

	# Get repository
	while true; do
		GIT_REPO=$(whiptail --inputbox "Git repository clone link:" 8 80 --title "$SETUP_TITLE" 3>&1 1>&2 2>&3  < /dev/tty)
		if [ "$?" = 1 ]; then
			echo "Configuration setup cancelled."
			exit 1
		fi
		# Run git command and show progress with infobox
		whiptail --infobox "Checking if repository can be accessed...\n\nPlease wait..." 8 50 < /dev/tty
		GIT_TERMINAL_PROMPT=0 git ls-remote --exit-code "$GIT_REPO" >/dev/null 2>&1
		exit_code=$?
		if [ "$exit_code" -eq 0 ]; then
			break
		else
			whiptail --msgbox "Can't access git repository!" --title "$SETUP_TITLE" 8 40 < /dev/tty
		fi
	done

	while true; do
		GIT_REPO_BRANCH=$(whiptail --inputbox "Branch name (leave blank to use default branch):" 10 40 --title "$SETUP_TITLE" 3>&1 1>&2 2>&3 < /dev/tty)
		if [ "$?" = 1 ]; then
			echo "Configuration setup cancelled."
			exit 1
		fi
		# Run git command and show progress with infobox
		whiptail --infobox "Checking if branch can be accessed...\n\nPlease wait..." 8 50 < /dev/tty
		GIT_TERMINAL_PROMPT=0 git ls-remote --exit-code "$GIT_REPO" "$GIT_REPO_BRANCH" >/dev/null 2>&1
		exit_code=$?
		if [ "$exit_code" -eq 0 ] || [ -z "$GIT_REPO_BRANCH" ]; then
			break
		else
			whiptail --msgbox "Can't access $GIT_REPO_BRANCH branch!" --title "$SETUP_TITLE" 8 40 < /dev/tty
		fi
	done

	while true; do
		DEPLOY_LOCATION=$(whiptail --inputbox "Deploy path (where your repo will be cloned to):" 8 70 --title "$SETUP_TITLE" "/scripts" 3>&1 1>&2 2>&3 < /dev/tty)
		if [ "$?" = 1 ]; then
		echo "Configuration setup cancelled."
			exit 1
		fi
		if mkdir -p "$DEPLOY_LOCATION" &>/dev/null; then
			break
		else
			whiptail --msgbox "Invalid path. Try again." 8 40 < /dev/tty
		fi
	done

	# Get repository run command
	REPO_RUN_COMMAND=$(whiptail --inputbox "Command to run the repository (leave blank for 'source main.*'):" 10 70 --title "$SETUP_TITLE" 3>&1 1>&2 2>&3 < /dev/tty)
	if [ "$?" = 1 ]; then
		echo "Configuration setup cancelled."
		exit 1
	fi
	# Set default if blank
	if [ -z "$REPO_RUN_COMMAND" ]; then
		REPO_RUN_COMMAND="source main.*"
	fi

	# Cage Window Manager flag
	if whiptail --title "$SETUP_TITLE" --yesno "Do you want to run the program as a kiosk using Cage?" 8 60 3>&1 1>&2 2>&3 < /dev/tty; then
		run_in_cage=1
	else
		run_in_cage=0
	fi

	# Turning on/off simple flags
	choices=$(whiptail --title "$SETUP_TITLE" --checklist \
		"Choose misc options (space to tick/untick):" 15 110 3 \
		"Full repo refresh" "Have the repository reclone itself rather than just git pull." OFF \
		"Check for Package Updates" "Check for latest updates each boot using apt." OFF \
		"Run repo script" "Run main.* on the repository directory." ON 3>&1 1>&2 2>&3 < /dev/tty)
	if [ "$?" = 1 ]; then
		echo "Configuration setup cancelled."
		exit 1
	fi

	# Convert choices to array
	mapfile -t selected <<< "$choices"

	full_repo_refresh=0
	check_for_package_updates=0
	run_script=0

	for choice in "${selected[@]}"; do
		case "$choice" in
			"Full repo refresh") full_repo_refresh=1 ;;
			"Check for Package Updates") check_for_package_updates=1 ;;
			"Stop repo script") run_script=1 ;;
		esac
	done

	cat > "$CONFIG_FILE" <<EOF
# GENERATED BY SETUP SCRIPT

# For repository
repository_url="$GIT_REPO"

# Leave as a blank string to by default clone from main/master
repository_branch="$GIT_REPO_BRANCH"

script_workspace="$DEPLOY_LOCATION"

# Command to run the repository
repo_run_command="$REPO_RUN_COMMAND"

# Full repo refresh flag
# 1 = Delete existing clone and clone repo again on boot
# 0 = Just run git pull on boot
full_repo_refresh=$full_repo_refresh

# Package update flag
# 1 = Check for the latest updates from apt repositories
# 0 = Do not check for package updates
check_for_package_updates=$check_for_package_updates

# Run repository script flag
# 1 = Runs the repository script
# 0 = Does not run the repository script at all
run_script=$run_script

# Cage Window Manager flag
# 1 = Set up and run code in Cage Window Manager
# 0 = Do not use Cage Window Manager
run_in_cage=$run_in_cage

EOF

	# Return to original directory
	cd "$ORIGINAL_DIR"
}

configuration_setup
cat $CONFIG_FILE
